package game;

import java.awt.Graphics;
import java.awt.Image;
import java.util.HashMap;

public abstract class Sprite {
	
	public int framerate;
	private static HashMap<String, SpriteSheet> animations = new HashMap<String, SpriteSheet>();
	private Image frame;
	private String state;
	private SpriteSheet animation;
	private double t;
	
	/**
	 * Instantiates the sprite's animations
	 * @param frames - array of frame counts
	 * @param columns - array of column counts
	 * @param animations - array of filenames (.png is assumed by default)
	 */
	public Sprite(int[] frames, int[] columns, String... animations) {
		for(int i=0; i<animations.length; i++) {
			loadAnimation(animations[i], columns[i], frames[i]);
		}
		framerate = Game.FRAME_RATE;
	}
	
	/**
	 * Render the sprite centered at (0,0)
	 * @param g - the Graphics context centered on the sprite
	 */
	public void draw(Graphics g, GameObject object) {
		if(frame==null||state==""||animation==null) return;
		g.drawImage(frame, -animation.width/2, -animation.height/2, null);
	}
	
	/**
	 * Adds a sprite sheet to the dictionary
	 * @param filename - filename of animation (.png extension by default)
	 * @param columns - number of columns in the sprite sheet
	 * @param frames - total number of frames in the sprite sheet
	 */
	public static void loadAnimation(String filename, int columns, int frames) {
		int i = filename.indexOf(".");
		String name = i>0?filename.substring(0, filename.indexOf(".")):filename;
		if(animations.containsKey(name)) {
			return;
		}
		animations.put(name, new SpriteSheet(i>0?filename:name+".png", columns, frames));
	}
	
	/**
	 * Updates the animation by a given time step
	 * @param state - the desired animation
	 * @param dt - the time step in seconds
	 * @return true if the animation completed
	 */
	public boolean animate(String state, double dt) {
		// Error checking
		if(!animations.containsKey(state)) {
			System.err.println("Animation not found: "+state);
			return false;
		}
		t += dt;
		// Change animations
		if(!state.equals(this.state)) {
			t = 0;
			this.state = state;
		}
		// Set animation frame
		animation = animations.get(state);
		double duration = animation.frames*framerate;
		frame = animation.getFrame((int)(t*framerate)%animation.frames);
		// Loop animation and return completion
		if(t >= duration) {
			t = 0;
			return true;
		} else {
			return false;
		}
	}
}
